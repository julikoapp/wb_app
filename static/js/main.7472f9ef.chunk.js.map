{"version":3,"sources":["components/robot.jsx","reducers.js","action.js","components/card.jsx","components/Searchbox.jsx","components/scroll.jsx","containers/App.jsx","constants.js","serviceWorker.js","index.js"],"names":["friendsArr","id","img","name","email","username","initialStateSearch","searchField","initialStateRobots","isPending","robots","Card","props","className","alt","src","image","SeachBox","type","value","nameLookfor","placeholder","onChange","searchingFunction","Scroll","style","overflowY","border","height","children","connect","state","searchRobots","requestRobots","dispatch","onSearchChange","event","payload","target","onRequestRobots","filteredRobots","filter","robot","toLowerCase","includes","map","robofriend","index","key","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7472f9ef.chunk.js","sourcesContent":["export const friendsArr = [\r\n    {\r\n        id: 1,\r\n        img:'https://robohash.org/1', \r\n        name:'Leanne Graham', \r\n        email:'Sincere@april.biz'\r\n    },\r\n    {\r\n        id: 2,\r\n        img:'https://robohash.org/2', \r\n        name:'Ervin Howell', \r\n        email:'evrin@jk.com'\r\n    },\r\n    {\r\n        id: 3,\r\n        img:'https://robohash.org/3', \r\n        name:'Clementine Bauch', \r\n        email:'clemishere@jil.com'\r\n    },\r\n    {\r\n        id: 4,\r\n        img:'https://robohash.org/4', \r\n        name:'Patricia', \r\n        email:'yugen@hbo.com'\r\n    },\r\n    {\r\n        id: 5,\r\n        img: 'https://robohash.org/5', \r\n        name:'Chelsey Dietrich', \r\n        email:'checkmeout@mail.ru'\r\n    },\r\n    {\r\n        id: 6,\r\n        img: 'https://robohash.org/6', \r\n        name:'Dastan Keldibekov', \r\n        email:'dastan@gmail.com'\r\n    },\r\n    {\r\n        id: 7,\r\n        img: 'https://robohash.org/7', \r\n        name: \"Leopoldo_Corkery\",\r\n        username: \"Karley_Dach@jasper.info\"\r\n    },\r\n    {\r\n        id: 8,\r\n        img: 'https://robohash.org/8', \r\n        name: \"Maxime_Nienow\",\r\n        email:\"Sherwood@rosamond.me\"\r\n    },\r\n    {\r\n        id: 9,\r\n        img: 'https://robohash.org/9', \r\n        name:'Glenna Reichert', \r\n        email:'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n        id: 10,\r\n        img: 'https://robohash.org/10', \r\n        name:'Clementina DuBuque', \r\n        email:'Rey.Padberg@karina.biz'\r\n    }\r\n]","import {\r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_SUCCESS,\r\n   } from './constants';\r\nimport {friendsArr} from './components/robot'\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) =>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: friendsArr\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) =>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots:action.payload, isPending:false}\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import {friendsArr} from './components/robot'\r\n\r\nimport {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n} from './constants';\r\n\r\nconst robots = friendsArr\r\nexport const setSearchField =(text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n    dispatch({\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: robots\r\n    });\r\n}","import React from 'react'\r\n\r\nfunction Card(props){\r\n    return(\r\n        <div className='robotCard YouSeeThisCard YouDontSeeThisCard'>\r\n            <img alt=\"robot\" src={props.image} />\r\n            <h3> {props.name }</h3>\r\n            <p> {props.email} </p>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Card","import React from 'react'\r\n\r\n\r\nfunction SeachBox(props){\r\n\r\n    return(\r\n    <input \r\n        className='search-box'\r\n        type='text' \r\n        value={props.nameLookfor}\r\n        placeholder=\"search Robots\"\r\n        onChange={props.searchingFunction}\r\n        ></input>)\r\n}\r\n\r\nexport default SeachBox","import React from 'react'\r\n\r\nfunction Scroll(props){\r\n    return (\r\n        <div style={{ overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React from 'react'\r\nimport {connect} from 'react-redux'\r\nimport {setSearchField, requestRobots} from '../action'\r\nimport Card from '../components/card'\r\nimport SearchBox from '../components/Searchbox'\r\nimport Scroll from '../components/scroll'\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => requestRobots(dispatch)\r\n    }\r\n}\r\n\r\nfunction App(props){\r\n    \r\n    const {searchField, onSearchChange, robots} = props;\r\n\r\n    \r\n    const filteredRobots = robots.filter(robot => {\r\n        return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n      })\r\n\r\n\r\n    return (\r\n        <div className='main-page'>\r\n            <h1> YOUR ROBOFRIENDS</h1>\r\n            <SearchBox \r\n                nameLookfor = {searchField}\r\n                searchingFunction = {onSearchChange}\r\n            />\r\n            <hr></hr>\r\n    \r\n        <Scroll>\r\n        <div className='cards'>\r\n            {filteredRobots.map((robofriend, index) =>(\r\n                <Card \r\n                    key= {index}\r\n                    id = {robofriend.id}\r\n                    name = {robofriend.name}\r\n                    email = {robofriend.email}\r\n                    image = {robofriend.img}\r\n                />\r\n            ))}\r\n        </div>\r\n        </Scroll>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","export const CHANGE_SEARCH_FIELD = \"CHAGE_SEARCH_FIELD\"\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers } from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport {searchRobots, requestRobots} from './reducers'\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst logger = createLogger()\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n  <Provider store={store}>\n  <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}